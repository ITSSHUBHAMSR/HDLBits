module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 
    
    parameter LEFT=0, RIGHT=1,GROUND=2,DIG=3;
    reg [1:0] state, next_state;
    reg [1:0] prev_state;
    reg [1:0] count;

    always @(*) begin
        // State transition logic
        if(areset)
            state=LEFT;
        else
            state=next_state;
    end

    always @(posedge clk, posedge areset) begin
        // State flip-flops with asynchronous reset
        if(areset) 
            next_state <= LEFT;
        else
            case(state)
                LEFT : begin next_state<=ground?(dig?DIG:(bump_left)?RIGHT:LEFT):GROUND; count<=1; end
                RIGHT : begin next_state<=ground?(dig?DIG:(bump_right)?LEFT:RIGHT):GROUND; count<=2; end
                GROUND : next_state <= ground?(count==1?LEFT:RIGHT):GROUND;
                DIG : next_state <= ground?DIG:GROUND;
                default : next_state<=LEFT;
            endcase
    end

    // Output logic
    assign walk_left = (state == LEFT);
    assign walk_right = (state == RIGHT);
    assign aaah = (state == GROUND);
    assign digging = (state == DIG);

endmodule
