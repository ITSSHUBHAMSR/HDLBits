module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);

    assign ena[1]=(q[3:0]=='d9)?1:0;
    assign ena[2]=((q[3:0]=='d9)&&(q[7:4]=='d9))?1:0;
    assign ena[3]=((q[3:0]=='d9)&&(q[7:4]=='d9)&&(q[11:8]=='d9))?1:0;
     
    BCD U0(clk,reset,1'b1,q[3:0]);
    BCD U1(clk,reset,ena[1],q[7:4]);
    BCD U2(clk,reset,ena[2],q[11:8]);
    BCD U3(clk,reset,ena[3],q[15:12]);
    
    
endmodule

module BCD(
    input clk,
    input reset,
    input ena,
    output [3:0]q);
    
    always@(posedge clk)begin
        if(reset)
            q<='d0;
        else if((ena==1) && (q<9))
            q<=q+1;
        else if((ena==1) && (q==9))
            q<='d0;
        else
            q<=q;
    end
    
endmodule
